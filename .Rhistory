Fun$Clarence=Fun$w1_d5
Fun$Paul=Fun$w1_d6
Fun$Condoleeza=Fun$w1_d7
Fun$Sarah=Fun$w1_d8
Fun$Hillary=Fun$w1_d9
Fun$Jesse=Fun$w1_d10
Fun$RParty=Fun$w1_d11
Fun$DParty=Fun$w1_d12
Fun$party[Fun$party==-1|Fun$party==4]=NA
Fun$ideology[Fun$ideology==-1]=NA
Fun$Barack[Fun$Barack==-1|Fun$Barack==998]=NA
Fun$Mitt[Fun$Mitt==-1|Fun$Mitt==998]=NA
Fun$Michelle[Fun$Michelle==-1|Fun$Michelle==998]=NA
Fun$Ann[Fun$Ann==-1|Fun$Ann==998]=NA
Fun$Clarence[Fun$Clarence==-1|Fun$Clarence==998]=NA
Fun$Paul[Fun$Paul==-1|Fun$Paul==998]=NA
Fun$Condoleeza[Fun$Condoleeza==-1|Fun$Condoleeza==998]=NA
Fun$Sarah[Fun$Sarah==-1|Fun$Sarah==998]=NA
Fun$Hillary[Fun$Hillary==-1|Fun$Hillary==998]=NA
Fun$Jesse[Fun$Jesse==-1|Fun$Jesse==998]=NA
Fun$RParty[Fun$RParty==-1|Fun$RParty==998]=NA
Fun$DParty[Fun$DParty==-1|Fun$DParty==998]=NA
Fun$ideology.extremity=abs(4-Fun$ideology)
Fun$Barack.extremity=abs(50-Fun$Barack)
Fun$Mitt.extremity=abs(50-Fun$Mitt)
Fun$Michelle.extremity=abs(50-Fun$Michelle)
Fun$Ann.extremity=abs(50-Fun$Ann)
Fun$Clarence.extremity=abs(50-Fun$Clarence)
Fun$Paul.extremity=abs(50-Fun$Paul)
Fun$Condoleeza.extremity=abs(50-Fun$Condoleeza)
Fun$Sarah.extremity=abs(50-Fun$Sarah)
Fun$Hillary.extremity=abs(50-Fun$Hillary)
Fun$Jesse.extremity=abs(50-Fun$Jesse)
Fun$RParty.extremity=abs(50-Fun$RParty)
Fun$DParty.extremity=abs(50-Fun$DParty)
Fun$Sum=(Fun$Barack.extremity+Fun$Mitt.extremity
+Fun$Hillary.extremity+Fun$Paul.extremity
+Fun$Jesse.extremity+Fun$Sarah.extremity)/6
head(Fun)
Fun2 <- as.data.frame(Fun)
summary(Fun2)
Fun2 <- Fun2[!is.na(Fun2$Barack.extremity),]
head(Fun2)
nrow(is.na(Fun2$Barack.extremity))
nrow(is.na(Fun$Barack.extremity))
freq(Fun$Barack.extremity)
table(Fun$Barack.extremity)
is.na(Fun$Barack.extremity)
is.na(Fun2$Barack.extremity)
Fun2 -> AllBarack
AllBarack[AllBarack$Barack.extremity < 11,]$Group <- "A"
head(AllBarack)
AllBarack$Group <- ""
AllBarack[AllBarack$Barack.extremity < 11,]$Group <- "A"
AllBarack[AllBarack$Barack.extremity < 21&AllBarack$Barack.extremity>10,]$Group <- "B"
AllBarack[AllBarack$Barack.extremity < 31&AllBarack$Barack.extremity>20,]$Group <- "c"
AllBarack[AllBarack$Barack.extremity < 41&AllBarack$Barack.extremity>30,]$Group <- "D"
AllBarack[AllBarack$Barack.extremity < 51&AllBarack$Barack.extremity>40,]$Group <- "E"
head(AllBarack)
table(AllBarack$Group)
hist(AllBarack$Group)
plot(AllBarack$Group)
hist(AllBarack$Group)
qplot(AllBarack$Group)
plot(AllBarack$Group)
library(ggplot2)
qplot(AllBarack$Group)
library("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data("segmentationOriginal")
segData <- subset(segmentationOriginal, Case == "Train")
head(segData)
cellID <- segData$Cell
class <- segData$Class
case <- segData$Case
segData <-segData[,-(1:3)]
statusColNum <- grep("Status", names(segData))
segData <- segData[,-statusColNum]
library(e1071)
head(segData)
skewness(segData$AngleCh1)
skewValues <- apply(segData, 2, skewness)
skewValues
avg <- apply(segData, 2, average)
avg <- apply(segData, 2, mean)
avg
sum. <- apply(segData, 2, sum)
sum.
library(caret)
pcaObject <- prcomp(segData, center=TRUE, scale.=TRUE)
head(pcaObject$x[,1:5])
library(mlbench)
data(Glass)
str(Glass)
hist(Glass$RI)
trans <- preProcess(Glass$RI, method="BoxCox")
trans <- preProcess(Glass, method="BoxCox")
Glass2 <- Glass[,-10]
str(Glass2)
trans <- preProcess(Glass2, method="BoxCox")
hist(trans$RI)
head(trans)
head(trans$bc$RI)
hist(trans$bc$RI)
head(trans$bc$RI$n)
hist(Glass$Na)
hist(Glass$Mg)
apply(Glass,2,hist)
apply(Glass2,2,hist)
mfrow(2,2)
nrows<- mfrow(2,2)
hist(Glass[,9])
hist(Glass[,8])
mfrow=c(3,3)
apply(Glass2,2,hist)
par(mfrow=c(3,3))
apply(Glass2,2,hist)
corr(Glass)
cor(Glass)
cor(Glass2)
library(corrplot)
install.packages("corrplot")
library(corrplot)
cor(Glass2) -> correlations
corrplot(correlations,order="hclust")
apply(Glass2,2,hist)
par(mfrow=c(3,3))
apply(Glass2,2,hist)
data("Soybean")
str("Soybean")
data("Soybean") -> Soybean
str("Soybean")
str(Soybean)
str(Soybean)
?Soybean
str(Soybean)
str(data("Soybean"))
soy
str(Soybean)
str(Soybean)
library(plyr)
count(Soybean,lodging)
count(Soybean$lodging)
count(Soybean$lodging, "lodging")
count(Soybean$lodging, 'lodging')
count(Soybean, 'lodging')
count(Soybean, 'mycelium')
apply(Soybean,2,count)
data("BloodBran")
data("BloodBrain")
str(BloodBrain)
str("BloodBrain)
str("BloodBrain")
str("BloodBrain")
data("BloodBrain") -> bloos
data("BloodBrain") -> blood
str(blood)
str(blood)
str(blood)
str(blood)
str(blood)
blood
data("BloodBrain")
data("BloodBrain") -> blood
blood
str(BloodBrain)
str("BloodBrain")
str("BloodBrain")
data(BloodBrain)
str(BloodBrain)
str(BloodBrain)
data(iris)
str(iris)
str(bloodbrain)
data(bloodbrain)
library(caret)
data(bloodbrain)
data(BloodBrain
)
str(bloodbrain)
str(BloodBrain)
data(BloodBrain) -> data
str(data)
?BloodBrain
str(data)
str(data)
str(data)
str(data)
str(data)
str(data)
str(data)
data(BloodBrain)
data(Glass)
str(Glass)
str(BloodBrain)
exists(BloodBrain)
exists("BloodBrain")
library(caret)
data(BloodBrain)
library(caret)
d <- data(package = "caret")
nm <- d$results[, "Item"]
lapply(mget(nm), dim)
data(list = nm, package = "plyr")
lapply(mget(nm), dim)
data(list = nm, package = "caret")
lapply(mget(nm), dim)
data(list = nm, package = "mlbench")
lapply(mget(nm), dim)
d <- data(package = "mlbench")
nm <- d$results[, "Item"]
lapply(mget(nm), dim)
lapply(mget(nm), dim)
lapply(mget(nm), dim)
d <- data(package = "plyr")
## names of data sets in the package
d$results[, "Item"]
# [1] "baseball" "ozone"
## assign it to use later
nm <- d$results[, "Item"]
## call the promised data
data(list = nm, package = "plyr")
## get the dimensions of each data set
lapply(mget(nm), dim)
d <- data(package = "caret")
## names of data sets in the package
d$results[, "Item"]
# [1] "baseball" "ozone"
## assign it to use later
nm <- d$results[, "Item"]
## call the promised data
data(list = nm, package = "caret")
## get the dimensions of each data set
lapply(mget(nm), dim)
data(bbbDescr)
data("BloodBrain")
data("BloodBrain") -> data
read(data)
head(data)
data(BloodBrain) -> data
head(data)
data(BloodBrain)
str(BloodBrain)
str(BloodBrain)
data(BloodBrain)
str(BloodBrain)
BloodBrain$bbbDescri
bbbDescri
bbbDescr
logBBB
str(bbbDescr)
par(mfrow=c(10,10))
apply(bbbDescr, 2, hist)
setwd("/Volumes/Project Drive/ALL/16 Kaggle/talkingdata/")
mobile <- read.csv("data.csv")
str(mobile)
length(unique(mobile$app_id))
setwd("/Volumes/Project Drive/ALL/16 Kaggle/talkingdata/")
mobile <- read.csv("data.csv")
length(unique(mobile$event_id))
nrow(mobile)
length(unique(mobile$device_id))
head(mobile)
max(length(mobile$app_id))
min(length(mobile$app_id))
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
shiny::runApp('Documents/open-fisheries-alaska')
library(rjson)
setwd("~/Documents/open-fisheries-alaska")
library(rjson)
install.packages("rjson")
json1 <- fromJSON(file = "bs_den.geojson")
json2 <- fromJSON(file = "goa_den.geojson")
library(RJSONIO)
json1 <- fromJSON(file = "bs_den.geojson")
json2 <- fromJSON(file = "goa_den.geojson")
library(rjson)
json1 <- fromJSON(file = "bs_den.geojson")
json2 <- fromJSON(file = "goa_den.geojson")
jsonl <- list(json1, json2)
jsonc <- toJSON(jsonl)
jsonc
write(jsonc, file = "jsonc")
shiny::runApp()
shiny::runApp()
shiny::runApp()
json1 <- fromJSON(file = "bs_den.geojson")
json2 <- fromJSON(file = "goa_den.geojson")
jsonl <- list(json1, json2)
jsonc <- toJSON(jsonl)
write(jsonc, file = "jsonc.geojson")
write(jsonc, file = "jsonc.geojson")
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("data_raw.csv",header=TRUE)
library(reshape2)
?melt
data2 <- melt(data,id=c(REG_AREA))
data2 <- melt(data,id=REG_AREA)
head(data)
data <- read.csv("data_raw.csv",header=TRUE)
data2 <- melt(data,id=REG_AREA)
head(data)
data2 <- melt(data,id=c(REG_AREA))
data2 <- melt(data,id=c("REG_AREA"))
head(data2)
str(data2)
summary(data2)
data2
library(reshape2)
data <- read.csv("data_raw.csv",header=TRUE)
data2 <- melt(data,id=c("REG_AREA"))
write.csv(data2,"quota.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Documents/open-fisheries-alaska")
shiny::runApp()
shiny::runApp()
shiny::runApp()
quota = read.csv("quota.csv", header=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fish <- read.csv("data_basic.csv",header=TRUE)
library(forecast)
install.packages("forecast")
install.packages("forecast")
head(fish)
fish <- read.csv("test.csv",header=TRUE)
fish$Year <- as.Date(fish$Year, "%Y")
head(fish$Year)
fish$Year <- as.Date(fish$Year)
fish$Year <- as.Date(fish$Year, "%Y-%m")
fish$Year <- as.Date(as.numeric(fish$Year), "%Y-%m")
head(fish$Year)
fish <- read.csv("test.csv",header=TRUE)
head(fish)
#Set date type
fish$Year <- as.Date(as.numeric(fish$Year), "%Y-%m")
fish$Quota <- as.numeric(as.character(fish$Quota))
pts <- ts(data=fish$Quota, start=c(1993-01), deltat=3/12)
plot(forecast.(pts))
library(forecast)
plot(forecast.(pts))
plot(forecast(pts))
head(fish$Year)
fish <- read.csv("test.csv",header=TRUE)
head(fish)
#Set date type
fish$Year <- as.Date(as.numeric(fish$Year), "%Y")
fish$Year <- as.Date(fish$Year, "%Y")
#Set GDP numeric type
fish$Quota <- as.numeric(as.character(fish$Quota))
#Create time series vector from data frame
pts <- ts(data=fish$Quota, start=c(1993-01), deltat=3/12)
#Forecast and Plot
plot(forecast(pts))
pts <- ts(data=fish$Quota, deltat=3/12)
#Forecast and Plot
plot(forecast(pts))
fish <- read.csv("test.csv",header=TRUE)
head(fish)
fish$Temperature <- as.numeric(as.character(fish$Temperature))
#Set quota numeric type
fish$Quota <- as.numeric(as.character(fish$Quota))
#Create time series vector from data frame
?ts
pts <- ts(data=fish$Quota, deltat=3/12)
#Forecast and Plot
plot(forecast(pts))
pts <- ts(data=fish$Quota,fish$Temperature deltat=3/12)
mod = lm(fish$Quota~ fish$Temperature)
predict(mod,c(9.5))
predict(mod,c(9.5,9))
predict.lm
mod
mod$coefficients[,2]
mod$coefficients[[,2]]
mod$coefficients[2]
mod$coefficients[2] * 9.5
mod$coefficients[2]$value * 9.5
mod$coefficients[2]$fish$Temperature * 9.5
pred <- mod$coefficients[2] * 9.5
pred
pred <- as.numeric(mod$coefficients[2]) * 9.5
pred
pred <- as.numeric(mod$coefficients[2]) * 9.5 + as.numeric(mod$coefficients[1])
pred
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fish <- read.csv("test.csv",header=TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fish$Year <- as.factor(fish$Year)
fish$Year
quota$variable
quota = read.csv("quota.csv", header=TRUE)
quota$variable <- as.factor(quota$variable)
quota$variable
fish[fish$Year=="X1993"]$Temperature
test[test$Year=="X1993"]$Temperature
head(fish)
fish[fish$Year=="X1993"]$Temperature
fish[fish$Year=="X1994"]$Temperature
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fish[fish$Year == "X2013"]$Temperature
fish <- read.csv("test.csv",header=TRUE)
fish[fish$Year == "X2013"]$Temperature
fish[fish$Year == "X2013",]$Temperature
shiny::runApp()
percent <- data.frame(reg_area = unique(quota$reg_area))
percent
percent <- data.frame(reg_area = unique(quota$reg_area),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04,0.06))
head(percent)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
percent <- data.frame(REG_AREA = unique(quota$REG_AREA),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04,0.06))
percent
percent <- data.frame(REG_AREA = unique(quota$REG_AREA),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04,0.06))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
percent <- data.frame(area = unique(quota$area),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04,0.06))
percent
percent <- data.frame(area = unique(quota$area),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04))
percent
percent <- data.frame(area = unique(quota$area),percent = c(0.03,0.2,0.11,0.37,0.15))
unique(quota$reg_area)
quota = read.csv("quota.csv", header=TRUE)
unique(quota$reg_area)
unique(quota$area)
quota = read.csv("quota.csv", header=TRUE)
unique(quota$area)
quota = read.csv("quota.csv", header=TRUE)
unique(quota$area)
quota
quota$area
unique(quota$area)
percent <- data.frame(area = unique(quota$area),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04,0.06))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
quota = read.csv("quota.csv", header=TRUE)
percent <- data.frame(reg_area = unique(quota$reg_area),percent = c(0.03,0.2,0.11,0.37,0.15,0.05,0.04,0.06))
unique(quota$reg_area)
shiny::runApp()
plot(fish$Temperature,fish$Quota)
